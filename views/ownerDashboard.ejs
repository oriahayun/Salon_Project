<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Salon | Dashboard</title>
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">

    <link rel="stylesheet" href="/css/bootstrap.min.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.9.0/css/all.css"
        integrity="sha256-PF6MatZtiJ8/c9O9HQ8uSUXr++R9KBYu4gbNG5511WE=" crossorigin="anonymous" />
    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto'>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/home.css">
    <link rel="stylesheet" href="/css/navbar.css">
</head>

<body>
    <%- include('./partials/ownerHeader'); %>
    <main class="main-container">
        <input id="searchSalon" class="input-controls" type="text" placeholder="Enter a Category">
        <input id="searchInput" class="input-controls" type="text" placeholder="Enter a location">
        <div class="map" id="map" style="width: 100%; height: 92vh;"></div>
    </main>
    <!-- weather box display footer -->
    <div class="weather-box app-icons">
        <div style="display: inline-block;">

            <div class="show-weather" data-toggle="tooltip" data-placement="bottom" title="Weather">
                <a href="#" class="app-icons" data-toggle="modal" data-target="#weather-pop">
                    <div class="circular-img">
                        <i id="home-page-wicon-main" class="wi"></i>
                    </div>
                    <span class="city-temperature" data-toggle="tooltip" data-placement="bottom" title=""></span>
                </a>
            </div>
            <span class="label-icon" id="city-name"></span>

        </div>
    </div>

    <!-- weather modal show detail  -->
    <div class="container">

        <!-- Modal -->
        <div class="modal right fade" id="weather-pop" tabindex="-1" role="dialog" aria-labelledby="weather-pop-title">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content" id="weather-pop-m">
                    <div class="modal-header">
                        <h4 class="modal-title" id="weather-pop-title">Weather</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>

                    <div class="modal-body">
                        <div class="loading">
                            <div class="spinner">
                                <div class="dot1"></div>
                                <div class="dot2"></div>
                            </div>
                        </div>
                        <section id="main">
                            <div class="w-section text-shadow">

                                <div class="row text-dark w-main">
                                    <div class="col-sm-12">
                                        <h4 class="title " style="margin-inline-start: 18px;">
                                            <span>
                                                Weather for
                                            </span>
                                            <a id="current-location"> </a>
                                        </h4>
                                        <div class="row">
                                            <div class="col-sm-6 text-center" id="main-icon-anim">
                                                <i id="wicon-main" class="wi wi-main"></i>
                                                <div id="temperature-w"></div>
                                            </div>
                                            <div class="col-sm-6" id="desc-box">
                                                <div class="day-text">Today</div>
                                                <p id="temp-h-l" class="text-capitalize"></p>
                                                <hr class="hr-title hr-title-primary">
                                                <p id="wind-cond-w" class="text-capitalize"></p>
                                                <hr class="hr-title hr-title-primary">
                                                <p id="description" class="text-capitalize"></p>
                                                <hr class="hr-title hr-title-primary">
                                                <p class="humidity"><span id="humidity"></span> <i
                                                        class="wi wi-humidity"></i> Humidity</p>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                <br>
                                <div class="card-section">
                                    <div class="row days-box">
                                        <div class="col-sm-3 text-center day-first">
                                            <p class="day"></p>
                                            <hr class="hr-title hr-title-primary">
                                            <p><i class="wi"></i></p>
                                            <p><span class="d-min-temp"></span> <span class="d-max-temp"></span>
                                            </p>
                                        </div>
                                        <div class="col-sm-3 text-center">
                                            <p class="day"></p>
                                            <hr class="hr-title hr-title-primary">
                                            <p><i class="wi"></i></p>
                                            <p><span class="d-min-temp"></span> <span class="d-max-temp"></span>
                                            </p>
                                        </div>
                                        <div class="col-sm-3 text-center">
                                            <p class="day"></p>
                                            <hr class="hr-title hr-title-primary">
                                            <p><i class="wi"></i></p>
                                            <p><span class="d-min-temp"></span> <span class="d-max-temp"></span>
                                            </p>
                                        </div>
                                        <div class="col-sm-3 text-center">
                                            <p class="day"></p>
                                            <hr class="hr-title hr-title-primary">
                                            <p><i class="wi"></i></p>
                                            <p><span class="d-min-temp"></span> <span class="d-max-temp"></span>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                        </section>
                    </div>

                </div><!-- modal-content -->
            </div><!-- modal-dialog -->
        </div><!-- modal -->
    </div>

    <!-- partial -->
    <script src="js/jquery.min.js"></script>
    <script src="js/navbar.js"></script>
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB4wDAFyAO2VssN5pRBuYMUKtcVhjD_2e8&libraries=places"></script>
    <script>
        var salon_positions = `<%- JSON.stringify(positions) %>`;
        let markers = [];
        let map;
        const salon_position_data = JSON.parse(salon_positions);
        let positions = [];
        salon_position_data.map((data) => {
            positions.push({
                lat: parseFloat(data.latitude),
                lng: parseFloat(data.longitude),
                positionId: data._id,
                name: data.name
            })
        })
        function getCoordinates() {
            return new Promise(function (resolve, reject) {
                navigator.geolocation.getCurrentPosition(resolve, reject);
            });
        }

        async function initialize() {
            const position = await this.getCoordinates();
            let curlatitude = position.coords.latitude;
            let curlongitude = position.coords.longitude;

            var latlng = new google.maps.LatLng(curlatitude, curlongitude);
            map = new google.maps.Map(document.getElementById('map'), {
                center: latlng,
                zoom: 12
            });

            markers = positions.map(position => {
                const marker = new google.maps.Marker({
                    position,
                    map,
                    draggable: true,
                    animation: google.maps.Animation.DROP,
                    positionId: position.positionId
                });
                marker.setMap(map)

                return marker
            })
            var marker = new google.maps.Marker({
                map: map,
                position: latlng,
                draggable: true,
                animation: google.maps.Animation.DROP,
                icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'
            });
            //marker.setMap(map)
            var input = document.getElementById('searchInput');
            var inputSalon = document.getElementById('searchSalon');
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(inputSalon);
            var geocoder = new google.maps.Geocoder();
            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);
            var infowindow = new google.maps.InfoWindow();
            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                bindDataToForm(place.formatted_address, place.geometry.location.lat(), place.geometry.location.lng());
                infowindow.setContent(place.formatted_address);
                infowindow.open(map, marker);

            });
            // this function will work on marker move event into map 
            markers.forEach((marker, index) => {
                google.maps.event.addListener(marker, 'dragend', function () {
                    geocoder.geocode({ 'latLng': marker.getPosition() }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            if (results[0]) {
                                bindDataToForm(results[0].formatted_address, marker.getPosition().lat(), marker.getPosition().lng());
                                infowindow.setContent(results[0].formatted_address);
                                infowindow.open(map, marker);
                            }
                        }
                    });
                });
                // google.maps.event.addListener(marker, "click", function () {
                //     let sPositionId = this.positionId
                //     if (sPositionId) {
                //         location.href = `/salons/detail-salon/${sPositionId}`;
                //     }
                // })
            })

        }
        function bindDataToForm(address, lat, lng) {
            console.log(address, lat, lng)
        }
        google.maps.event.addDomListener(window, 'load', initialize);


        $("#searchSalon").keyup(function (e) {
            hideMarkers();
            if ($("#searchSalon").val() == "") {
                markers = positions.map(position => {
                    const marker = new google.maps.Marker({
                        position,
                        map,
                        draggable: true,
                        animation: google.maps.Animation.DROP,
                        positionId: position.positionId
                    });
                    marker.setMap(map);
                    return marker;
                })
            } else {
                let tempMarkers = positions.filter((position) => position.name.startsWith($("#searchSalon").val()));
                markers = tempMarkers.map(position => {
                    const marker = new google.maps.Marker({
                        position,
                        map,
                        draggable: true,
                        animation: google.maps.Animation.DROP,
                        positionId: position.positionId
                    });
                    marker.setMap(map);
                    return marker
                })
            }
            // markers.forEach((marker, index) => {
            //     google.maps.event.addListener(marker, 'dragend', function () {
            //         geocoder.geocode({ 'latLng': marker.getPosition() }, function (results, status) {
            //             if (status == google.maps.GeocoderStatus.OK) {
            //                 if (results[0]) {
            //                     bindDataToForm(results[0].formatted_address, marker.getPosition().lat(), marker.getPosition().lng());
            //                     infowindow.setContent(results[0].formatted_address);
            //                     infowindow.open(map, marker);
            //                 }
            //             }
            //         });
            //     });
            //     google.maps.event.addListener(marker, "click", function () {
            //         let sPositionId = this.positionId
            //         if (sPositionId) {
            //             location.href = `/salons/detail-salon/${sPositionId}`;
            //         }
            //     })
            // })

        });
        function setMapAll(map) {
            for (let i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }
        function hideMarkers() {
            setMapAll(null);
        }
    </script>
</body>

</html>